/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lab1_jesus_santiago;

import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;

import java.util.LinkedList;
import javax.swing.ButtonGroup;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;

import javax.swing.JLabel;

import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;

/**
 *
 * @author Jesus David
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        setLocationRelativeTo(null);
        String texto = "<html><body>Seleccione dos nodos con doble<br>clic y presione \"Consultar\" para<br>averiguar la relación </body></html>";
        help.setText(texto);
        list.setModel(model);
        this.setTitle("Árbol Binario");

    }

    private Tree GenTree = new Tree();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AddPanel = new javax.swing.JPanel();
        insertar = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        list = new javax.swing.JList<>();
        consult = new javax.swing.JLabel();
        cleantree = new javax.swing.JLabel();
        selectedn = new javax.swing.JLabel();
        ppane = new javax.swing.JPanel();
        help = new javax.swing.JLabel();
        cleans = new javax.swing.JLabel();
        result = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        AddPanel.setBackground(new java.awt.Color(255, 255, 255));
        AddPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        AddPanel.setForeground(new java.awt.Color(204, 204, 204));
        AddPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        insertar.setBackground(new java.awt.Color(255, 255, 255));
        insertar.setFont(new java.awt.Font("Microsoft JhengHei UI", 1, 12)); // NOI18N
        insertar.setForeground(new java.awt.Color(255, 51, 51));
        insertar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        insertar.setText("Insertar");
        insertar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 51, 51)));
        insertar.setOpaque(true);
        insertar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                insertarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                insertarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                insertarMouseExited(evt);
            }
        });
        AddPanel.add(insertar, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, 60, 30));

        list.setFont(new java.awt.Font("Microsoft JhengHei", 0, 12)); // NOI18N
        jScrollPane1.setViewportView(list);

        AddPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 30, 140, 60));

        consult.setBackground(new java.awt.Color(255, 255, 255));
        consult.setFont(new java.awt.Font("Microsoft JhengHei UI", 1, 12)); // NOI18N
        consult.setForeground(new java.awt.Color(102, 0, 204));
        consult.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        consult.setText("Consultar");
        consult.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 0, 204)));
        consult.setOpaque(true);
        consult.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                consultMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                consultMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                consultMouseExited(evt);
            }
        });
        AddPanel.add(consult, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 40, 70, 30));

        cleantree.setBackground(new java.awt.Color(255, 255, 255));
        cleantree.setFont(new java.awt.Font("Microsoft JhengHei UI", 1, 12)); // NOI18N
        cleantree.setForeground(new java.awt.Color(0, 153, 102));
        cleantree.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cleantree.setText("Limpiar Arbol");
        cleantree.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 102)));
        cleantree.setOpaque(true);
        cleantree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cleantreeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cleantreeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cleantreeMouseExited(evt);
            }
        });
        AddPanel.add(cleantree, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 40, 90, 30));

        selectedn.setFont(new java.awt.Font("Microsoft JhengHei UI", 2, 10)); // NOI18N
        selectedn.setText("Nodos seleccionados:");
        AddPanel.add(selectedn, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 10, -1, -1));

        ppane.setBackground(new java.awt.Color(255, 255, 255));
        ppane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        ppane.setForeground(new java.awt.Color(204, 204, 204));
        ppane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ppaneMouseClicked(evt);
            }
        });

        help.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 11)); // NOI18N

        cleans.setBackground(new java.awt.Color(255, 255, 255));
        cleans.setFont(new java.awt.Font("Microsoft JhengHei", 1, 11)); // NOI18N
        cleans.setForeground(new java.awt.Color(0, 0, 255));
        cleans.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cleans.setText("Limpiar selección");
        cleans.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));
        cleans.setOpaque(true);
        cleans.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cleansMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cleansMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cleansMouseExited(evt);
            }
        });

        result.setEditable(false);
        result.setBackground(new java.awt.Color(255, 255, 255));
        result.setFont(new java.awt.Font("Microsoft JhengHei Light", 1, 14)); // NOI18N
        result.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, "Relación", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Trebuchet MS", 0, 11)), "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Microsoft JhengHei", 1, 11))); // NOI18N
        result.setFocusable(false);
        result.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ppaneLayout = new javax.swing.GroupLayout(ppane);
        ppane.setLayout(ppaneLayout);
        ppaneLayout.setHorizontalGroup(
            ppaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ppaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ppaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cleans, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(help, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(498, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ppaneLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(result, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );
        ppaneLayout.setVerticalGroup(
            ppaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ppaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(help, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 165, Short.MAX_VALUE)
                .addComponent(cleans, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62)
                .addComponent(result, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(AddPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 683, Short.MAX_VALUE)
            .addComponent(ppane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(ppane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AddPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static JComboBox fathers = new JComboBox();

    private void insertarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_insertarMouseClicked
        String dato, father;
        int side = 1, x = 0, y = 0;
        Font font = new Font("Tahoma", Font.PLAIN, 14);
        Graphics g2d = (Graphics2D) ppane.getGraphics();
        g2d.setFont(font);
        FontMetrics fm = g2d.getFontMetrics(font);

        try {
            if (GenTree.myTree.getDato().equals("")) {
                dato = JOptionPane.showInputDialog(null, "Ingrese el nombre del primer elemento");

                father = null;
                fathers.addItem(dato);

                side = 1;
                if (dato != null) {

                    Tree.add(GenTree.myTree, father, dato, side);
                    x = ppane.getWidth() / 2;
                    y = 30;
                    Tree.buscar(GenTree.myTree, dato).setX(x);
                    Tree.buscar(GenTree.myTree, dato).setY(y);
                    Tree.buscar(GenTree.myTree, dato).setWidth(fm.stringWidth(dato) + 6);
                    Tree.buscar(GenTree.myTree, dato).setHeight(fm.getHeight() + 2);
                    redrawTree(GenTree.myTree);
                    
                    System.out.println("");
                }

            } else {
                dato = JOptionPane.showInputDialog(null, "Ingrese el nombre del dato a insertar");
                final JPanel fpanel = new JPanel();
                final JLabel label = new JLabel();
                label.setText("Seleccione padre del dato a insertar: ");
                fpanel.add(label);
                fpanel.add(fathers);
                JOptionPane.showMessageDialog(null, fpanel);

                father = String.valueOf(fathers.getSelectedItem());
                final JPanel panel = new JPanel();
                final JRadioButton izq = new JRadioButton("Izquierdo");
                final JRadioButton der = new JRadioButton("Derecho");
                ButtonGroup bg = new ButtonGroup();
                bg.add(izq);
                bg.add(der);
                panel.add(izq);
                panel.add(der);
                izq.setSelected(true);
                JOptionPane.showMessageDialog(null, panel);

                if (izq.isSelected()) {
                    side = 1;
                } else if (der.isSelected()) {
                    side = 2;
                }

                boolean sw = Tree.existe(GenTree.myTree, dato);
                
                if (dato != null && father != null && sw == false) {
                    if (!dato.isEmpty() && !father.isEmpty()) {

                        Tree.add(GenTree.myTree, father, dato, side);

                        y = Tree.buscar(GenTree.myTree, dato).getPadre().getY() + 40;
                        double exp;
                        int factor;
                        if (side == 1) {
                            exp = Tree.buscar(GenTree.myTree, father).getLevel() + 2;
                            factor = (int) (ppane.getWidth() / Math.pow(2, exp));
                            Tree.buscar(GenTree.myTree, dato).setX((Tree.buscar(GenTree.myTree, dato).getPadre().getX()) - factor);
                            Tree.buscar(GenTree.myTree, dato).setY(Tree.buscar(GenTree.myTree, dato).getPadre().getY() + 60);
                        } else if (side == 2) {
                            exp = Tree.buscar(GenTree.myTree, father).getLevel() + 2;
                            factor = (int) (ppane.getWidth() / Math.pow(2, exp));
                            Tree.buscar(GenTree.myTree, dato).setX((Tree.buscar(GenTree.myTree, dato).getPadre().getX()) + factor);
                            Tree.buscar(GenTree.myTree, dato).setY(Tree.buscar(GenTree.myTree, dato).getPadre().getY() + 60);
                        }
                        Tree.buscar(GenTree.myTree, dato).setWidth(fm.stringWidth(dato) + 6);
                        Tree.buscar(GenTree.myTree, dato).setHeight(fm.getHeight() + 2);

                        redrawTree(GenTree.myTree);
                        
                        
                        System.out.println("");
                    } else {
                        JOptionPane.showMessageDialog(null, "No se aceptan campos vacios", "Error", JOptionPane.INFORMATION_MESSAGE);
                    }
                } else if (sw == true) {
                    JOptionPane.showMessageDialog(null, "No se pudo insertar el dato, ya existe", "Error", 0);

                }
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No se pudo insertar el dato", "Intenta de nuevo...", 0);
        }


    }//GEN-LAST:event_insertarMouseClicked

    public Nodo Track(Nodo root, int x, int y) {
        Font font = new Font("Tahoma", Font.PLAIN, 14);
        Graphics g2d = (Graphics2D) ppane.getGraphics();
        g2d.setFont(font);
        FontMetrics fm = g2d.getFontMetrics(font);

        LinkedList<Nodo> cola = new LinkedList();
        cola.addFirst(root);
        Nodo n = null;

        while (!cola.isEmpty()) {
            Nodo nodo = cola.removeLast();
            if (x >= nodo.getX() - (fm.stringWidth(nodo.getDato()) + 6) / 2 && x <= (nodo.getX() + nodo.getWidth()) && y >= nodo.getY() && y <= nodo.getY() + nodo.getHeight()) {
                n = nodo;
            }
            if (nodo.getIzquierdo() != null) {
                cola.addFirst(nodo.getIzquierdo());
            }
            if (nodo.getDerecho() != null) {
                cola.addFirst(nodo.getDerecho());
            }
        }
        return n;
    }

    DefaultListModel model = new DefaultListModel();


    private void ppaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ppaneMouseClicked
        if (evt.getClickCount() == 2) {

            Nodo node = Track(GenTree.myTree, evt.getX(), evt.getY());
            if (model.size() < 2 && node != null) {
                boolean sw = false;

                for (int i = 0; i < model.getSize(); i++) {
                    if (node.getDato().equals(model.getElementAt(i))) {
                        sw = true;
                    }
                }
                if (sw == false) {
                    model.addElement(node.getDato());
                }

                Font font = new Font("Tahoma", Font.PLAIN, 14);
                Graphics g = ppane.getGraphics();
                Graphics2D g2d = (Graphics2D) (ppane.getGraphics());
                g2d.setColor(Color.black);
                g2d.setFont(font);
                FontMetrics fm = g2d.getFontMetrics(font);
                g.setColor(new Color(255, 255, 102));
                g.fillRect(node.getX() - (fm.stringWidth(node.getDato()) + 6) / 2, node.getY(), node.getWidth(), node.getHeight());
                g.setColor(Color.black);
                g2d.drawString(node.getDato() + "", node.getX() - (fm.stringWidth(node.getDato())) / 2, node.getY() + 14);
                g.drawRect(node.getX() - (fm.stringWidth(node.getDato()) + 6) / 2, node.getY(), node.getWidth(), node.getHeight());

            }

        }
    }//GEN-LAST:event_ppaneMouseClicked

    boolean GrandP(Nodo a, Nodo b) {
        boolean sw = false;
        try {
            if (a.getPadre().getPadre() == b) {
                sw = true;

            }
        } catch (Exception e) {

        }
        return sw;

    }

    boolean Daddy(Nodo a, Nodo b) {
        boolean sw = false;
        try {
            if (a.getPadre() == b) {
                sw = true;

            }
        } catch (Exception e) {

        }
        return sw;

    }

    boolean Uncle(Nodo a, Nodo b){
        boolean sw=false;
        try{
            if (a.getPadre().getPadre()==b.getPadre()) {
                sw=true;
            }
        }catch(Exception e){
            
        }
        return sw;
    }
    boolean Bro(Nodo a, Nodo b) {
        boolean sw = false;
        try {
            if (a.getPadre() == b.getPadre()) {
                sw = true;

            }
        } catch (Exception e) {

        }
        return sw;

    }

    boolean Cousin(Nodo a, Nodo b) {
        boolean sw = false;
        try {
            if (Bro(a.getPadre(), b.getPadre())) {

                if (a.getPadre() != b.getPadre()) {
                    sw = true;
                }
            }
        } catch (Exception e) {

        }
        return sw;

    }
    private void consultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_consultMouseClicked
        if (model.getSize() == 2) {
            Nodo v, w;
            v = Tree.buscar(GenTree.myTree, String.valueOf(model.getElementAt(0)));
            w = Tree.buscar(GenTree.myTree, String.valueOf(model.getElementAt(1)));
            try {
                if (GrandP(v, w)) {
                    result.setText("");
                    result.setText("\"" + w.getDato() + "\" es abuelo(a) de " + "\"" + v.getDato() + "\"");
                } else if (GrandP(w, v)) {
                    result.setText("");
                    result.setText("\"" + v.getDato() + "\" es abuelo(a) de " + "\"" + w.getDato() + "\"");
                } else if (Bro(v, w)) {
                    result.setText("");
                    result.setText("\"" + v.getDato() + "\" y " + "\"" + w.getDato() + "\"" + " son hermanos(as)");
                } else if (Cousin(v, w)) {
                    result.setText("");
                    result.setText("\"" + v.getDato() + "\" y " + "\"" + w.getDato() + "\"" + " son primos(as)");
                } else if (Daddy(v, w)) {
                    result.setText("");
                    result.setText("\"" + w.getDato() + "\" es padre de " + "\"" + v.getDato() + "\"");
                } else if (Daddy(w, v)) {
                    result.setText("");
                    result.setText("\"" + v.getDato() + "\" es padre de " + "\"" + w.getDato() + "\"");
                }else if(Uncle(v,w)){
                    result.setText("");
                    result.setText("\"" + w.getDato() + "\" es tio(a) de " + "\"" + v.getDato() + "\"");
                }else if (Uncle(w,v)){
                    result.setText("");
                    result.setText("\"" + v.getDato() + "\" es tio(a) de " + "\"" + w.getDato() + "\"");
                }else{
                    System.out.println("N/A");
                }
            } catch (Exception e) {

            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar dos(2) nodos", "Aviso", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_consultMouseClicked

    private void cleansMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cleansMouseClicked
        redrawTree(GenTree.myTree);
        model.clear();
        result.setText("");
    }//GEN-LAST:event_cleansMouseClicked

    private void cleantreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cleantreeMouseClicked
        GenTree = new Tree();
        ppane.repaint();
        redrawTree(GenTree.myTree);
        result.setText("");
        fathers.removeAllItems();
        
        

    }//GEN-LAST:event_cleantreeMouseClicked

    private void resultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_resultActionPerformed

    private void insertarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_insertarMouseEntered
        insertar.setForeground(Color.white);
        insertar.setBackground(new Color(255, 51, 51));
    }//GEN-LAST:event_insertarMouseEntered

    private void insertarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_insertarMouseExited
        insertar.setForeground(new Color(255, 51, 51));
        insertar.setBackground(Color.white);
    }//GEN-LAST:event_insertarMouseExited

    private void consultMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_consultMouseEntered
        consult.setForeground(Color.white);
        consult.setBackground(new Color(102, 0, 204));
    }//GEN-LAST:event_consultMouseEntered

    private void consultMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_consultMouseExited
        consult.setForeground(new Color(102, 0, 204));
        consult.setBackground(Color.white);
    }//GEN-LAST:event_consultMouseExited

    private void cleantreeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cleantreeMouseEntered
        cleantree.setForeground(Color.white);
        cleantree.setBackground(new Color(0, 153, 102));
    }//GEN-LAST:event_cleantreeMouseEntered

    private void cleantreeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cleantreeMouseExited
        cleantree.setForeground(new Color(0, 153, 102));
        cleantree.setBackground(Color.white);
    }//GEN-LAST:event_cleantreeMouseExited

    private void cleansMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cleansMouseEntered
        cleans.setForeground(Color.white);
        cleans.setBackground(new Color(0,0,255));
    }//GEN-LAST:event_cleansMouseEntered

    private void cleansMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cleansMouseExited
        cleans.setForeground(new Color(0,0,255));
        cleans.setBackground(Color.white);
    }//GEN-LAST:event_cleansMouseExited

    public void draw(Nodo nodo, Nodo root) {

        try {
            Font font = new Font("Tahoma", Font.PLAIN, 14);
            Graphics g = ppane.getGraphics();
            g.setColor(Color.BLACK);
            Graphics g2d = (Graphics2D) ppane.getGraphics();
            g2d.setFont(font);
            g2d.setColor(Color.white);
            FontMetrics fm = g2d.getFontMetrics(font);

            Nodo padre = nodo.getPadre();
            if (padre != null) {
                g.drawLine(padre.getX() + 10 - (fm.stringWidth(padre.getDato()) + 6) / 2, padre.getY() + 10, nodo.getX() + 10, nodo.getY() + 10);
                g.setColor(Color.white);
                g.fillRect(padre.getX() - (fm.stringWidth(padre.getDato()) + 6) / 2, padre.getY(), padre.getWidth(), padre.getHeight());
                g.setColor(Color.black);
                g.drawRect(padre.getX() - (fm.stringWidth(padre.getDato()) + 6) / 2, padre.getY(), padre.getWidth(), padre.getHeight());
                g.setColor(Color.black);
                g2d.drawString(padre.getDato() + "", padre.getX() - (fm.stringWidth(padre.getDato())) / 2, padre.getY() + 14);
            }

            g.setColor(Color.white);
            g.fillRect(nodo.getX() - (fm.stringWidth(nodo.getDato()) + 6) / 2, nodo.getY(), nodo.getWidth(), nodo.getHeight());
            g.setColor(Color.black);
            g.drawRect(nodo.getX() - (fm.stringWidth(nodo.getDato()) + 6) / 2, nodo.getY(), nodo.getWidth(), nodo.getHeight());
            g2d.setColor(Color.black);
            g2d.drawString(nodo.getDato() + "", nodo.getX() - (fm.stringWidth(nodo.getDato())) / 2, nodo.getY() + 14);

        } catch (Exception e) {
            System.out.println(e.toString());
        }
    }

    Nodo aux = GenTree.myTree;

    public void redrawTree(Nodo raiz) {
        
        if (raiz != null) {
            draw(raiz, aux);
            redrawTree(raiz.getIzquierdo());
            redrawTree(raiz.getDerecho());
            draw(raiz, aux);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AddPanel;
    private javax.swing.JLabel cleans;
    private javax.swing.JLabel cleantree;
    private javax.swing.JLabel consult;
    private javax.swing.JLabel help;
    private javax.swing.JLabel insertar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> list;
    private javax.swing.JPanel ppane;
    private javax.swing.JTextField result;
    private javax.swing.JLabel selectedn;
    // End of variables declaration//GEN-END:variables
}
