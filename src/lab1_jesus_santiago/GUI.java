/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lab1_jesus_santiago;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsEnvironment;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import javax.swing.ButtonGroup;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;

/**
 *
 * @author Jesus David
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        setLocationRelativeTo(null);
        String[] fontNames = GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
        System.out.println(Arrays.toString(fontNames));

    }

    private Tree GenTree = new Tree();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AddPanel = new javax.swing.JPanel();
        insertar = new javax.swing.JLabel();
        pretxt = new javax.swing.JTextField();
        ppane = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        AddPanel.setBackground(new java.awt.Color(255, 255, 255));
        AddPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        insertar.setBackground(new java.awt.Color(255, 255, 255));
        insertar.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 11)); // NOI18N
        insertar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        insertar.setText("Insertar");
        insertar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        insertar.setOpaque(true);
        insertar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                insertarMouseClicked(evt);
            }
        });
        AddPanel.add(insertar, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, 56, 27));

        pretxt.setEditable(false);
        pretxt.setBackground(new java.awt.Color(255, 255, 255));
        pretxt.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        pretxt.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Pre-orden", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Microsoft JhengHei", 0, 11))); // NOI18N
        AddPanel.add(pretxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 30, 315, 40));

        ppane.setBackground(new java.awt.Color(255, 255, 255));
        ppane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        ppane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ppaneMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout ppaneLayout = new javax.swing.GroupLayout(ppane);
        ppane.setLayout(ppaneLayout);
        ppaneLayout.setHorizontalGroup(
            ppaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        ppaneLayout.setVerticalGroup(
            ppaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 379, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(AddPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 595, Short.MAX_VALUE)
            .addComponent(ppane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(ppane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(AddPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static JComboBox fathers = new JComboBox();

    private void insertarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_insertarMouseClicked
        String dato, father;
        int side = 1, x = 0, y = 0;
        Font font = new Font("Tahoma", Font.PLAIN, 14);
        Graphics g2d = (Graphics2D) ppane.getGraphics();
        g2d.setFont(font);
        FontMetrics fm = g2d.getFontMetrics(font);

        try {
            if (GenTree.myTree.getDato().equals("")) {
                dato = JOptionPane.showInputDialog(null, "Ingrese el nombre del primer elemento");

                father = null;
                fathers.addItem(dato);

                side = 1;
                if (dato != null) {

                    Tree.add(GenTree.myTree, father, dato, side);
                    x = ppane.getWidth() / 2;
                    y = 30;
                    Tree.buscar(GenTree.myTree, dato).setX(x);
                    Tree.buscar(GenTree.myTree, dato).setY(y);
                    Tree.buscar(GenTree.myTree, dato).setWidth(fm.stringWidth(dato) + 6);
                    Tree.buscar(GenTree.myTree, dato).setHeight(fm.getHeight() + 2);
                    repintarArbol(GenTree.myTree);
                    pretxt.setText("");
                    Arbol.Preorden(GenTree.myTree, pretxt);
                    Arbol.Preorden(GenTree.myTree);
                    System.out.println("");
                }

            } else {
                dato = JOptionPane.showInputDialog(null, "Ingrese el nombre del dato a insertar");
                final JPanel fpanel = new JPanel();
                final JLabel label = new JLabel();
                label.setText("Seleccione padre del dato a insertar: ");
                fpanel.add(label);
                fpanel.add(fathers);
                JOptionPane.showMessageDialog(null, fpanel);

                father = String.valueOf(fathers.getSelectedItem());
                final JPanel panel = new JPanel();
                final JRadioButton izq = new JRadioButton("Izquierdo");
                final JRadioButton der = new JRadioButton("Derecho");
                ButtonGroup bg = new ButtonGroup();
                bg.add(izq);
                bg.add(der);
                panel.add(izq);
                panel.add(der);
                izq.setSelected(true);
                JOptionPane.showMessageDialog(null, panel);

                if (izq.isSelected()) {
                    side = 1;
                } else if (der.isSelected()) {
                    side = 2;
                }

                boolean sw = Tree.existe(GenTree.myTree, dato);
                System.out.println(sw);
                if (dato != null && father != null && sw == false) {
                    if (!dato.isEmpty() && !father.isEmpty()) {

                        Tree.add(GenTree.myTree, father, dato, side);

                        y = Tree.buscar(GenTree.myTree, dato).getPadre().getY() + 40;
                        double exp;
                        int factor;
                        if (side == 1) {
                            exp = Tree.buscar(GenTree.myTree, father).getLevel() + 2;
                            factor = (int) (ppane.getWidth() / Math.pow(2, exp));
                            Tree.buscar(GenTree.myTree, dato).setX((Tree.buscar(GenTree.myTree, dato).getPadre().getX()) - factor);
                            Tree.buscar(GenTree.myTree, dato).setY(Tree.buscar(GenTree.myTree, dato).getPadre().getY() + 60);
                        } else if (side == 2) {
                            exp = Tree.buscar(GenTree.myTree, father).getLevel() + 2;
                            factor = (int) (ppane.getWidth() / Math.pow(2, exp));
                            Tree.buscar(GenTree.myTree, dato).setX((Tree.buscar(GenTree.myTree, dato).getPadre().getX()) + factor);
                            Tree.buscar(GenTree.myTree, dato).setY(Tree.buscar(GenTree.myTree, dato).getPadre().getY() + 60);
                        }
                        Tree.buscar(GenTree.myTree, dato).setWidth(fm.stringWidth(dato) + 6);
                        Tree.buscar(GenTree.myTree, dato).setHeight(fm.getHeight() + 2);

                        repintarArbol(GenTree.myTree);
                        //repintarArbol(GenTree.myTree);
                        pretxt.setText("");
                        Arbol.Preorden(GenTree.myTree, pretxt);
                        Arbol.Preorden(GenTree.myTree);
                        System.out.println("");
                    } else {
                        JOptionPane.showMessageDialog(null, "No se aceptan campos vacios", "Error", JOptionPane.INFORMATION_MESSAGE);
                    }
                } else if (sw == true) {
                    JOptionPane.showMessageDialog(null, "No se pudo insertar el dato, ya existe", "Error", 0);

                }
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No se pudo insertar el dato", "Intenta de nuevo...", 0);
        }


    }//GEN-LAST:event_insertarMouseClicked

    public Nodo Track(Nodo root, int x, int y) {
        Font font = new Font("Tahoma", Font.PLAIN, 14);
        Graphics g2d = (Graphics2D) ppane.getGraphics();
        g2d.setFont(font);
        FontMetrics fm = g2d.getFontMetrics(font);

        LinkedList<Nodo> cola = new LinkedList();
        cola.addFirst(root);
        Nodo n = null;

        while (!cola.isEmpty()) {
            Nodo nodo = cola.removeLast();
            if (x >= nodo.getX() - (fm.stringWidth(nodo.getDato()) + 6) / 2 && x <= (nodo.getX() + nodo.getWidth()) && y >= nodo.getY() && y <= nodo.getY() + nodo.getHeight()) {
                n = nodo;
            }
            if (nodo.getIzquierdo() != null) {
                cola.addFirst(nodo.getIzquierdo());
            }
            if (nodo.getDerecho() != null) {
                cola.addFirst(nodo.getDerecho());
            }
        }
        return n;
    }


    private void ppaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ppaneMouseClicked
        try {
            System.out.println(Track(GenTree.myTree, evt.getX(), evt.getY()).getDato());
        } catch (Exception e) {
            System.out.println("Fuera de rango");
        }
    }//GEN-LAST:event_ppaneMouseClicked

    public void draw(Nodo nodo, Nodo root) {

        try {
            Font font = new Font("Tahoma", Font.PLAIN, 14);
            Graphics g = ppane.getGraphics();
            g.setColor(Color.BLACK);
            Graphics g2d = (Graphics2D) ppane.getGraphics();
            g2d.setFont(font);
            g2d.setColor(Color.white);
            FontMetrics fm = g2d.getFontMetrics(font);

            Nodo padre = nodo.getPadre();
            if (padre != null) {
                g.drawLine(padre.getX() + 10 - (fm.stringWidth(padre.getDato()) + 6) / 2, padre.getY() + 10, nodo.getX() + 10, nodo.getY() + 10);
                g.setColor(Color.white);
                g.fillRect(padre.getX() - (fm.stringWidth(padre.getDato()) + 6) / 2, padre.getY(), padre.getWidth(), padre.getHeight());
                g.setColor(Color.black);
                g.drawRect(padre.getX() - (fm.stringWidth(padre.getDato()) + 6) / 2, padre.getY(), padre.getWidth(), padre.getHeight());
                g.setColor(Color.black);
                g2d.drawString(padre.getDato() + "", padre.getX() - (fm.stringWidth(padre.getDato())) / 2, padre.getY() + 14);
            }

            g.setColor(Color.white);
            g.fillRect(nodo.getX() - (fm.stringWidth(nodo.getDato()) + 6) / 2, nodo.getY(), nodo.getWidth(), nodo.getHeight());
            g.setColor(Color.black);
            g.drawRect(nodo.getX() - (fm.stringWidth(nodo.getDato()) + 6) / 2, nodo.getY(), nodo.getWidth(), nodo.getHeight());
            g2d.setColor(Color.black);
            g2d.drawString(nodo.getDato() + "", nodo.getX() - (fm.stringWidth(nodo.getDato())) / 2, nodo.getY() + 14);

        } catch (Exception e) {
            System.out.println(e.toString());
        }
    }

    Nodo aux = GenTree.myTree;

    public void repintarArbol(Nodo raiz) {

        if (raiz != null) {
            draw(raiz, aux);
            repintarArbol(raiz.getIzquierdo());
            repintarArbol(raiz.getDerecho());
            draw(raiz, aux);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AddPanel;
    private javax.swing.JLabel insertar;
    private javax.swing.JPanel ppane;
    private javax.swing.JTextField pretxt;
    // End of variables declaration//GEN-END:variables
}
